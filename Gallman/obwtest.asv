%function out  = KatieAssembler(userfilespec, numstart)
% This function reads the original data collection files
% It filters the data and saves it into a single structure
% Performs these analyses: OBW, zAMP
% Relies on k_zAmp, k_FindMaxWindow, k_fft
%
% Usage: kg(#).e = KatieAssembler(userfilespec, Fs, numstart)
%
clearvars -except kg kg2 rkg k
userfilespec = 'Eigen*';
numstart = 23;
% This should not change, but if for some reason...
tempchan = 3; % Either 4 or 3
lightchan = 4; % Either 5 or 4

daycount = 0;


%% SET UP 
% Get the list of files to be analyzed  
        iFiles = dir(userfilespec);
            % Get sample frequency
            load(iFiles(1).name, 'tim');
            Fs = 1 / (tim(2) - tim(1));
            clear tim
               
% Set up filters
        % High pass filter cutoff frequency
            highp = 100; %200 %k = 9 800-1200
            [b,a] = butter(5, highp/(Fs/2), 'high'); % Filter to eliminate 60Hz contamination
        % Low pass filter cutoff frequency
            lowp = 1200;    %1500
            [f,e] = butter(5, lowp/(Fs/2), 'low'); % Filter to eliminate high frequency contamination
                    
% How much of the sample that we will use (each sample is 1 second)  
% This is important because the fish moves
        SampleWindw = 0.250; % 250 ms window
        
% Fish limit frequencies for OBW calculation (unlikely to be changed)
        topFreqOBW = 800;%800
        botFreqOBW = 200;

out(1).s(length(iFiles)).Fs = Fs;
out(1).s(length(iFiles)).name = [];
        
    
%% CYCLE THROUGH EVERY FILE IN DIRECTORY

    ff = waitbar(0, 'Cycling through files.');
 datasubset = 1657;

 figure(27); clf; hold on;
for k = 1:datasubset
       
     waitbar(k/datasubset, ff, 'Assembling', 'modal');

    
       % LOAD THE DATA FILE
        load(iFiles(k).name, 'data', 'tim');
        out(1).s(k).Fs = 1 / (tim(2)-tim(1)); % Extract the sample rate
        out(2).s(k).Fs = out(1).s(k).Fs;
        
       % Filter data  
          
            data(:,1) = filtfilt(b,a, data(:,1)); % High pass filter
           % data(:,1) = filtfilt(f,e, data(:,1)); % Low pass filter   
            
            data(:,2) = filtfilt(b,a, data(:,2)); % High pass filter
          %  data(:,2) = filtfilt(f,e, data(:,2)); % Low pass filter   

        % Add time stamps (in seconds) relative to computer midnight (COMES FROM THE FILENAME)
 
                hour = str2double(iFiles(k).name(numstart:numstart+1));        %numstart based on time stamp text location
                minute = str2double(iFiles(k).name(numstart+3:numstart+4));
                second = str2double(iFiles(k).name(numstart+6:numstart+7));
                
            if k > 1 && ((hour*60*60) + (minute*60) + second) < out(2).s(k-1).tim24
                   daycount = daycount + 1;
            end
            
       % PICK YOUR WINDOW - THIS IS A CRITICAL STEP THAT MAY NEED REVISION

        for j = 1:2 % Perform analyses on the two channels
        
            
            % [~, idx] = max(abs(data(:,j))); % FIND THE MAXIMUM
            [out(j).s(k).startim, ~] = k_FindMaxWindow(data(:,j), tim, SampleWindw);
            data4analysis = (data(tim > out(j).s(k).startim & tim < out(j).s(k).startim+SampleWindw, j));     
            data4analysis = (data4analysis - mean(data4analysis)); 

            
           % data4analysis = (data4analysis - mean(data4analysis));
            % ANALYSES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            
%             % OBW
            [out(j).s(k).bw,out(j).s(k).flo,out(j).s(k).fhi,out(j).s(k).obwAmp] = obw(data4analysis, Fs, [botFreqOBW topFreqOBW]);
%             % zAmp
%             out(j).s(k).zAmp = k_zAmp(data4analysis);
            % FFT Machine
            [out(j).s(k).fftFreq, out(j).s(k).peakfftAmp, out(j).s(k).sumfftAmp] = k_fft(data4analysis, Fs); 

           if mod(k-1, 50) == 0 && j == 1
                %find the first zero crossing
                    z = zeros(1,length(data4analysis)); %create vector length of data
                    z(data4analysis > 0) = 1; %fill with 1s for all filtered data greater than 0
                    z = diff(z); %subtract the X(2) - X(1) to find the positive zero crossings
                    posZs = find(z == 1); 
                    newidx = find(tim >= tim(posZs(1)) & tim < tim(posZs(1)) + .02); 
            
                if out(j).s(k).fftFreq > 525
               ax(1)=subplot(211); title('high freq');hold on;     
                plot(tim(newidx)-tim(newidx(1)), data4analysis(newidx));
                end

                if out(j).s(k).fftFreq < 440
               ax(2)=subplot(212);title('low freq'); hold on;     
                plot(tim(newidx)-tim(newidx(1)), data4analysis(newidx));
                end 
            end
      
            out(j).s(k).light = mean(data(:,lightchan));
            out(j).s(k).temp = mean(data(:,tempchan));
    
            
        % There are 86400 seconds in a day.
        out(j).s(k).timcont = (hour*60*60) + (minute*60) + second + (daycount*86400) ;
        out(j).s(k).tim24 = (hour*60*60) + (minute*60) + second;

        
        end
        
end
%linkaxes(ax, 'x');
        pause(1); close(ff);
        

 
 %%
 figure(28);clf; hold on;
        
        ax(1) = subplot(411); title('obwAmp vs fftamp'); hold on;
            plot([out(1).s.timcont]/3600, [out(1).s.obwAmp]);
            plot([out(1).s.timcont]/3600, [out(1).s.sumfftAmp]);
        ax(2) = subplot(412); title('bw'); hold on;
            plot([out(1).s.timcont]/3600, [out(1).s.bw]);
           % plot([out(2).s.timcont]/3600, [out(2).s.bw]);
        ax(3) = subplot(413); title('frequency'); hold on;
            plot([out(1).s.timcont]/3600, [out(1).s.fftFreq]);
            plot([out(1).s.timcont]/3600, [out(1).s.flo], 'o-');
            plot([out(1).s.timcont]/3600, [out(1).s.fhi]);
        ax(4) = subplot(414); title('light'); hold on;ylim([-1, 6]);
            plot([out(1).s.timcont]/3600, [out(1).s.light]);
            plot([out(2).s.timcont]/3600, [out(2).s.light]);
    
    linkaxes(ax, 'x')
        
        
        
        
        
         
    